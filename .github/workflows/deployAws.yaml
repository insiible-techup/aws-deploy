name: aws deployment

on:
    push:
        branches:
            - main

    pull_request:
        branches:
            - main

    workflow_dispatch:


jobs:
    deployAws:
        runs-on: ubuntu-latest
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            TF_IN_AUTOMATION: true
        permissions:
            id-token: write # This is required for requesting the JWT
            contents: read  # This is required for actions/checkout  
        steps:
            - name: cloning repo
              uses: actions/checkout@v3


            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                aws-region: us-east-1
                role-to-assume: arn:aws:iam::746196583728:role/AWS_LINK
                role-session-name: awsConf

            
            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v3
              with:
                # cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
                terraform_version: 0.15.0
        
            - name: Terraform Format
              id: fmt
              run: | 
                    cd ./terraform
                    terraform fmt -check -recursive
              continue-on-error: true
    
            - name: Post Format
              if: always() && github.ref != 'refs/heads/main' && (steps.fmt.outcome == 'success' || steps.fmt.outcome == 'failure')
              uses: robburger/terraform-pr-commenter@v1.5.0
              with:
                commenter_type: fmt
                commenter_input: ${{ format('{0}{1}', steps.fmt.outputs.stdout, steps.fmt.outputs.stderr) }}
                commenter_exitcode: ${{ steps.fmt.outputs.exitcode }}
    
            - name: Terraform Init
              id: init
              run: | 
                   cd ./terraform
                   terraform init
    

            - name: Post Init
              if: always() && github.ref != 'refs/heads/main' && (steps.init.outcome == 'success' || steps.init.outcome == 'failure')
              uses: robburger/terraform-pr-commenter@v1.5.0
              with:
                commenter_type: init
                commenter_input: ${{ format('{0}{1}', steps.init.outputs.stdout, steps.init.outputs.stderr) }}
                commenter_exitcode: ${{ steps.init.outputs.exitcode }}
    
            - name: Terraform Validate
              id: validate
              run: |
                    cd ./terraform
                    terraform validate
    
            - name: Post Validate
              if: always() && github.ref != 'refs/heads/main' && (steps.validate.outcome == 'success' || steps.validate.outcome == 'failure')
              uses: robburger/terraform-pr-commenter@v1.5.0
              with:
                commenter_type: validate
                commenter_input: ${{ format('{0}{1}', steps.validate.outputs.stdout, steps.validate.outputs.stderr) }}
                commenter_exitcode: ${{ steps.validate.outputs.exitcode }}
    
            - name: Terraform Plan
              id: plan
              run: |
                    cd ./terraform 
                    terraform plan -out workspace.plan
                    # terraform plan 
    
            - name: Post Plan
              if: always() && github.ref != 'refs/heads/main' && (steps.plan.outcome == 'success' || steps.plan.outcome == 'failure')
              uses: robburger/terraform-pr-commenter@v1.5.0
              with:
                commenter_type: plan
                commenter_input: ${{ format('{0}{1}', steps.plan.outputs.stdout, steps.plan.outputs.stderr) }}
                commenter_exitcode: ${{ steps.plan.outputs.exitcode }}


            # - name: Terraform Destroy
            #   id: destroy
            #   run: |
            #        cd ./terraform
            #        terraform destroy -auto-approve
    
            - name: Terraform Apply
              id: apply
              run: |
                    cd ./terraform
                    terraform apply workspace.plan